generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  googleAccountId String    @unique
  name            String
  cpf             String    @unique
  phone           String
  email           String    @unique
  type            UserType? @default(CUSTOMER)
  picture         String?
  admin           Admin?
  barber          Barber?
  customer        Customer?

  @@index([cpf])
  @@index([googleAccountId])
  @@index([phone])
}

model Customer {
  id           Int                      @id @default(autoincrement())
  userId       Int                      @unique
  user         User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments BarbershopAppointments[]
}

model Admin {
  id          Int          @id @default(autoincrement())
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  barbershops Barbershop[]
}

model Barber {
  id           Int                      @id @default(autoincrement())
  userId       Int                      @unique
  barbershopId Int
  barbershop   Barbershop               @relation(fields: [barbershopId], references: [id])
  user         User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedule     BarberSchedule[]
  appointments BarbershopAppointments[]
}

model BarberSchedule {
  id             Int      @id @default(autoincrement())
  barberId       Int
  weekday        Weekdays
  startTime      String
  breakTimeStart String
  breakTimeEnd   String
  endTime        String
  barber         Barber   @relation(fields: [barberId], references: [userId], onDelete: Cascade)

  @@index([barberId])
  @@index([weekday])
}

model Barbershop {
  id                     Int                      @id @default(autoincrement())
  name                   String
  phone                  String
  cnpj                   String                   @unique
  addressId              Int                      @unique
  adminId                Int
  address                BarbershopAddress        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  admin                  Admin                    @relation(fields: [adminId], references: [userId])
  barbers                Barber[]
  barbershopAppointments BarbershopAppointments[]
  barbershopServices     BarbershopServices[]

  @@index([cnpj])
  @@index([name])
}

model BarbershopServices {
  id                  Int                @id @default(autoincrement())
  name                String
  price               Decimal
  duration            String
  barbershopId        Int
  barbershop          Barbershop         @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  appointmentServices ScheduledService[]
}

model BarbershopAppointments {
  id                Int                @id @default(autoincrement())
  customerId        Int
  barberId          Int
  barbershopId      Int
  dateTime          DateTime
  barber            Barber             @relation(fields: [barberId], references: [userId])
  barbershop        Barbershop         @relation(fields: [barbershopId], references: [id])
  customer          Customer           @relation(fields: [customerId], references: [userId])
  scheduledServices ScheduledService[]
  serviceDelivery   ServiceDelivery?
}

model ScheduledService {
  appointmentId         Int
  serviceId             Int
  barbershopAppointment BarbershopAppointments @relation(fields: [appointmentId], references: [id])
  service               BarbershopServices     @relation(fields: [serviceId], references: [id])

  @@id([appointmentId, serviceId])
}

model ServiceDelivery {
  id                    Int                    @id @default(autoincrement())
  totalPrice            Decimal
  appointmentId         Int                    @unique
  status                AppointmentStatus
  barbershopAppointment BarbershopAppointments @relation(fields: [appointmentId], references: [id])
}

model BarbershopAddress {
  id           Int         @id @default(autoincrement())
  street       String
  number       String
  neighborhood String
  zipcode      String
  cityId       Int
  city         City        @relation(fields: [cityId], references: [id])
  barbershop   Barbershop?

  @@index([zipcode])
}

model City {
  id        Int                 @id @default(autoincrement())
  name      String
  stateId   Int
  state     State               @relation(fields: [stateId], references: [id])
  addresses BarbershopAddress[]
}

model State {
  id           Int    @id @default(autoincrement())
  name         String
  abbreviation String @unique @db.Char(2)
  cities       City[]

  @@index([abbreviation])
}

enum Weekdays {
  DOMINGO
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
}

enum AppointmentStatus {
  FINALIZADO
  AGUARDANDO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  QUITADO
}

enum UserType {
  BARBER
  CUSTOMER
  ADMIN
}
